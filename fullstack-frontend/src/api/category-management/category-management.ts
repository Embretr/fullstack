/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/vue-query';
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import {
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  AddCategoriesToItem200,
  Category
} from '.././model';





/**
 * Retrieves a list of all categories
 * @summary Get all categories
 */
export const getAllCategories = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Category[]>> => {
    
    
    return axios.default.get(
      `/api/categories`,options
    );
  }


export const getGetAllCategoriesQueryKey = () => {
    return ['api','categories'] as const;
    }

    
export const getGetAllCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getAllCategories>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCategories>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  getGetAllCategoriesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCategories>>> = ({ signal }) => getAllCategories({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllCategories>>, TError, TData> 
}

export type GetAllCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllCategories>>>
export type GetAllCategoriesQueryError = AxiosError<unknown>


/**
 * @summary Get all categories
 */

export function useGetAllCategories<TData = Awaited<ReturnType<typeof getAllCategories>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCategories>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllCategoriesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



/**
 * Creates a new category
 * @summary Create category
 */
export const createCategory = (
    category: MaybeRef<Category>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Category>> => {
    category = unref(category);
    
    return axios.default.post(
      `/api/categories`,
      category,options
    );
  }



export const getCreateCategoryMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCategory>>, TError,{data: Category}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createCategory>>, TError,{data: Category}, TContext> => {
    
const mutationKey = ['createCategory'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCategory>>, {data: Category}> = (props) => {
          const {data} = props ?? {};

          return  createCategory(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof createCategory>>>
    export type CreateCategoryMutationBody = Category
    export type CreateCategoryMutationError = AxiosError<unknown>

    /**
 * @summary Create category
 */
export const useCreateCategory = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCategory>>, TError,{data: Category}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof createCategory>>,
        TError,
        {data: Category},
        TContext
      > => {

      const mutationOptions = getCreateCategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Adds a category to an existing item
 * @summary Add category to item
 */
export const addCategoriesToItem = (
    itemId: MaybeRef<number>,
    addCategoriesToItemBody: MaybeRef<number>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AddCategoriesToItem200>> => {
    itemId = unref(itemId);
addCategoriesToItemBody = unref(addCategoriesToItemBody);
    
    return axios.default.post(
      `/api/categories/${itemId}/categories`,
      addCategoriesToItemBody,options
    );
  }



export const getAddCategoriesToItemMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addCategoriesToItem>>, TError,{itemId: number;data: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addCategoriesToItem>>, TError,{itemId: number;data: number}, TContext> => {
    
const mutationKey = ['addCategoriesToItem'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addCategoriesToItem>>, {itemId: number;data: number}> = (props) => {
          const {itemId,data} = props ?? {};

          return  addCategoriesToItem(itemId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddCategoriesToItemMutationResult = NonNullable<Awaited<ReturnType<typeof addCategoriesToItem>>>
    export type AddCategoriesToItemMutationBody = number
    export type AddCategoriesToItemMutationError = AxiosError<unknown>

    /**
 * @summary Add category to item
 */
export const useAddCategoriesToItem = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addCategoriesToItem>>, TError,{itemId: number;data: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof addCategoriesToItem>>,
        TError,
        {itemId: number;data: number},
        TContext
      > => {

      const mutationOptions = getAddCategoriesToItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    