/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/vue-query';
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import {
  computed,
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  DeleteUserByEmail200,
  MakeUserAdmin200,
  RemoveAdminRole200,
  User
} from '.././model';





/**
 * Updates the role of the user with the specified email to ADMIN.
 * @summary Make user admin
 */
export const makeUserAdmin = (
    email: MaybeRef<string>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MakeUserAdmin200>> => {
    email = unref(email);
    
    return axios.default.put(
      `/api/users/${email}/admin`,undefined,options
    );
  }



export const getMakeUserAdminMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof makeUserAdmin>>, TError,{email: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof makeUserAdmin>>, TError,{email: string}, TContext> => {
    
const mutationKey = ['makeUserAdmin'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof makeUserAdmin>>, {email: string}> = (props) => {
          const {email} = props ?? {};

          return  makeUserAdmin(email,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MakeUserAdminMutationResult = NonNullable<Awaited<ReturnType<typeof makeUserAdmin>>>
    
    export type MakeUserAdminMutationError = AxiosError<unknown>

    /**
 * @summary Make user admin
 */
export const useMakeUserAdmin = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof makeUserAdmin>>, TError,{email: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof makeUserAdmin>>,
        TError,
        {email: string},
        TContext
      > => {

      const mutationOptions = getMakeUserAdminMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Removes the ADMIN role from the user with the specified email.
 * @summary Remove admin role from user
 */
export const removeAdminRole = (
    email: MaybeRef<string>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RemoveAdminRole200>> => {
    email = unref(email);
    
    return axios.default.put(
      `/api/users/${email}/admin/remove`,undefined,options
    );
  }



export const getRemoveAdminRoleMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeAdminRole>>, TError,{email: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof removeAdminRole>>, TError,{email: string}, TContext> => {
    
const mutationKey = ['removeAdminRole'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeAdminRole>>, {email: string}> = (props) => {
          const {email} = props ?? {};

          return  removeAdminRole(email,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveAdminRoleMutationResult = NonNullable<Awaited<ReturnType<typeof removeAdminRole>>>
    
    export type RemoveAdminRoleMutationError = AxiosError<unknown>

    /**
 * @summary Remove admin role from user
 */
export const useRemoveAdminRole = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeAdminRole>>, TError,{email: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof removeAdminRole>>,
        TError,
        {email: string},
        TContext
      > => {

      const mutationOptions = getRemoveAdminRoleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Retrieves the user details for the specified email.
 * @summary Get user by email
 */
export const getUserByEmail = (
    email: MaybeRef<string>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    email = unref(email);
    
    return axios.default.get(
      `/api/users/${email}`,options
    );
  }


export const getGetUserByEmailQueryKey = (email: MaybeRef<string>,) => {
    return ['api','users',email] as const;
    }

    
export const getGetUserByEmailQueryOptions = <TData = Awaited<ReturnType<typeof getUserByEmail>>, TError = AxiosError<string>>(email: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByEmail>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  getGetUserByEmailQueryKey(email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserByEmail>>> = ({ signal }) => getUserByEmail(email, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: computed(() => !!(unref(email))), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserByEmail>>, TError, TData> 
}

export type GetUserByEmailQueryResult = NonNullable<Awaited<ReturnType<typeof getUserByEmail>>>
export type GetUserByEmailQueryError = AxiosError<string>


/**
 * @summary Get user by email
 */

export function useGetUserByEmail<TData = Awaited<ReturnType<typeof getUserByEmail>>, TError = AxiosError<string>>(
 email: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByEmail>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserByEmailQueryOptions(email,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



/**
 * Deletes the user with the specified email.
 * @summary Delete user by email
 */
export const deleteUserByEmail = (
    email: MaybeRef<string>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeleteUserByEmail200>> => {
    email = unref(email);
    
    return axios.default.delete(
      `/api/users/${email}`,options
    );
  }



export const getDeleteUserByEmailMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserByEmail>>, TError,{email: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUserByEmail>>, TError,{email: string}, TContext> => {
    
const mutationKey = ['deleteUserByEmail'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUserByEmail>>, {email: string}> = (props) => {
          const {email} = props ?? {};

          return  deleteUserByEmail(email,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUserByEmailMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUserByEmail>>>
    
    export type DeleteUserByEmailMutationError = AxiosError<unknown>

    /**
 * @summary Delete user by email
 */
export const useDeleteUserByEmail = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserByEmail>>, TError,{email: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof deleteUserByEmail>>,
        TError,
        {email: string},
        TContext
      > => {

      const mutationOptions = getDeleteUserByEmailMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    