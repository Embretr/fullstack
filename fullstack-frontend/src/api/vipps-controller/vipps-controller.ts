/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation
} from '@tanstack/vue-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationReturnType
} from '@tanstack/vue-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import {
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  HandleCallbackBody,
  InitiatePayment200,
  InitiatePaymentParams,
  RefundPayment200,
  RefundPaymentParams
} from '.././model';





export const refundPayment = (
    params: MaybeRef<RefundPaymentParams>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RefundPayment200>> => {
    params = unref(params);
    
    return axios.default.post(
      `/api/vipps/refund`,undefined,{
    ...options,
        params: {...unref(params), ...options?.params},}
    );
  }



export const getRefundPaymentMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refundPayment>>, TError,{params: RefundPaymentParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof refundPayment>>, TError,{params: RefundPaymentParams}, TContext> => {
    
const mutationKey = ['refundPayment'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof refundPayment>>, {params: RefundPaymentParams}> = (props) => {
          const {params} = props ?? {};

          return  refundPayment(params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RefundPaymentMutationResult = NonNullable<Awaited<ReturnType<typeof refundPayment>>>
    
    export type RefundPaymentMutationError = AxiosError<unknown>

    export const useRefundPayment = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refundPayment>>, TError,{params: RefundPaymentParams}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof refundPayment>>,
        TError,
        {params: RefundPaymentParams},
        TContext
      > => {

      const mutationOptions = getRefundPaymentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const initiatePayment = (
    params: MaybeRef<InitiatePaymentParams>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<InitiatePayment200>> => {
    params = unref(params);
    
    return axios.default.post(
      `/api/vipps/payment`,undefined,{
    ...options,
        params: {...unref(params), ...options?.params},}
    );
  }



export const getInitiatePaymentMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof initiatePayment>>, TError,{params: InitiatePaymentParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof initiatePayment>>, TError,{params: InitiatePaymentParams}, TContext> => {
    
const mutationKey = ['initiatePayment'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof initiatePayment>>, {params: InitiatePaymentParams}> = (props) => {
          const {params} = props ?? {};

          return  initiatePayment(params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type InitiatePaymentMutationResult = NonNullable<Awaited<ReturnType<typeof initiatePayment>>>
    
    export type InitiatePaymentMutationError = AxiosError<unknown>

    export const useInitiatePayment = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof initiatePayment>>, TError,{params: InitiatePaymentParams}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof initiatePayment>>,
        TError,
        {params: InitiatePaymentParams},
        TContext
      > => {

      const mutationOptions = getInitiatePaymentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const handleCallback = (
    handleCallbackBody: MaybeRef<HandleCallbackBody>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    handleCallbackBody = unref(handleCallbackBody);
    
    return axios.default.post(
      `/api/vipps/callback`,
      handleCallbackBody,options
    );
  }



export const getHandleCallbackMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof handleCallback>>, TError,{data: HandleCallbackBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof handleCallback>>, TError,{data: HandleCallbackBody}, TContext> => {
    
const mutationKey = ['handleCallback'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof handleCallback>>, {data: HandleCallbackBody}> = (props) => {
          const {data} = props ?? {};

          return  handleCallback(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type HandleCallbackMutationResult = NonNullable<Awaited<ReturnType<typeof handleCallback>>>
    export type HandleCallbackMutationBody = HandleCallbackBody
    export type HandleCallbackMutationError = AxiosError<unknown>

    export const useHandleCallback = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof handleCallback>>, TError,{data: HandleCallbackBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof handleCallback>>,
        TError,
        {data: HandleCallbackBody},
        TContext
      > => {

      const mutationOptions = getHandleCallbackMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    