/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/vue-query';
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import {
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  UpdateEmailRequest,
  UpdatePasswordRequest,
  UpdateUsernameRequest,
  User
} from '.././model';





/**
 * Updates the username of the currently authenticated user.
 * @summary Update username
 */
export const updateUsername = (
    updateUsernameRequest: MaybeRef<UpdateUsernameRequest>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    updateUsernameRequest = unref(updateUsernameRequest);
    
    return axios.default.put(
      `/api/userinfo/username`,
      updateUsernameRequest,options
    );
  }



export const getUpdateUsernameMutationOptions = <TError = AxiosError<string>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUsername>>, TError,{data: UpdateUsernameRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateUsername>>, TError,{data: UpdateUsernameRequest}, TContext> => {
    
const mutationKey = ['updateUsername'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUsername>>, {data: UpdateUsernameRequest}> = (props) => {
          const {data} = props ?? {};

          return  updateUsername(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateUsernameMutationResult = NonNullable<Awaited<ReturnType<typeof updateUsername>>>
    export type UpdateUsernameMutationBody = UpdateUsernameRequest
    export type UpdateUsernameMutationError = AxiosError<string>

    /**
 * @summary Update username
 */
export const useUpdateUsername = <TError = AxiosError<string>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUsername>>, TError,{data: UpdateUsernameRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof updateUsername>>,
        TError,
        {data: UpdateUsernameRequest},
        TContext
      > => {

      const mutationOptions = getUpdateUsernameMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Updates the password of the currently authenticated user.
 * @summary Update password
 */
export const updatePassword = (
    updatePasswordRequest: MaybeRef<UpdatePasswordRequest>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    updatePasswordRequest = unref(updatePasswordRequest);
    
    return axios.default.put(
      `/api/userinfo/password`,
      updatePasswordRequest,options
    );
  }



export const getUpdatePasswordMutationOptions = <TError = AxiosError<string>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePassword>>, TError,{data: UpdatePasswordRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updatePassword>>, TError,{data: UpdatePasswordRequest}, TContext> => {
    
const mutationKey = ['updatePassword'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePassword>>, {data: UpdatePasswordRequest}> = (props) => {
          const {data} = props ?? {};

          return  updatePassword(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof updatePassword>>>
    export type UpdatePasswordMutationBody = UpdatePasswordRequest
    export type UpdatePasswordMutationError = AxiosError<string>

    /**
 * @summary Update password
 */
export const useUpdatePassword = <TError = AxiosError<string>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePassword>>, TError,{data: UpdatePasswordRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof updatePassword>>,
        TError,
        {data: UpdatePasswordRequest},
        TContext
      > => {

      const mutationOptions = getUpdatePasswordMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Retrieves the email address of the currently authenticated user.
 * @summary Get user email
 */
export const getUserEmail = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    
    return axios.default.get(
      `/api/userinfo/email`,options
    );
  }


export const getGetUserEmailQueryKey = () => {
    return ['api','userinfo','email'] as const;
    }

    
export const getGetUserEmailQueryOptions = <TData = Awaited<ReturnType<typeof getUserEmail>>, TError = AxiosError<string>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserEmail>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  getGetUserEmailQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserEmail>>> = ({ signal }) => getUserEmail({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserEmail>>, TError, TData> 
}

export type GetUserEmailQueryResult = NonNullable<Awaited<ReturnType<typeof getUserEmail>>>
export type GetUserEmailQueryError = AxiosError<string>


/**
 * @summary Get user email
 */

export function useGetUserEmail<TData = Awaited<ReturnType<typeof getUserEmail>>, TError = AxiosError<string>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserEmail>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserEmailQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



/**
 * Updates the email address of the currently authenticated user.
 * @summary Update email
 */
export const updateEmail = (
    updateEmailRequest: MaybeRef<UpdateEmailRequest>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    updateEmailRequest = unref(updateEmailRequest);
    
    return axios.default.put(
      `/api/userinfo/email`,
      updateEmailRequest,options
    );
  }



export const getUpdateEmailMutationOptions = <TError = AxiosError<string>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateEmail>>, TError,{data: UpdateEmailRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateEmail>>, TError,{data: UpdateEmailRequest}, TContext> => {
    
const mutationKey = ['updateEmail'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateEmail>>, {data: UpdateEmailRequest}> = (props) => {
          const {data} = props ?? {};

          return  updateEmail(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateEmailMutationResult = NonNullable<Awaited<ReturnType<typeof updateEmail>>>
    export type UpdateEmailMutationBody = UpdateEmailRequest
    export type UpdateEmailMutationError = AxiosError<string>

    /**
 * @summary Update email
 */
export const useUpdateEmail = <TError = AxiosError<string>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateEmail>>, TError,{data: UpdateEmailRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof updateEmail>>,
        TError,
        {data: UpdateEmailRequest},
        TContext
      > => {

      const mutationOptions = getUpdateEmailMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Retrieves the username of the currently authenticated user.
 * @summary Get username
 */
export const getUserName = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    
    return axios.default.get(
      `/api/userinfo/name`,options
    );
  }


export const getGetUserNameQueryKey = () => {
    return ['api','userinfo','name'] as const;
    }

    
export const getGetUserNameQueryOptions = <TData = Awaited<ReturnType<typeof getUserName>>, TError = AxiosError<string>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserName>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  getGetUserNameQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserName>>> = ({ signal }) => getUserName({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserName>>, TError, TData> 
}

export type GetUserNameQueryResult = NonNullable<Awaited<ReturnType<typeof getUserName>>>
export type GetUserNameQueryError = AxiosError<string>


/**
 * @summary Get username
 */

export function useGetUserName<TData = Awaited<ReturnType<typeof getUserName>>, TError = AxiosError<string>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserName>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserNameQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



/**
 * Retrieves the profile information of the currently authenticated user.
 * @summary Get current user profile
 */
export const getCurrentUserProfile = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    
    return axios.default.get(
      `/api/userinfo/me`,options
    );
  }


export const getGetCurrentUserProfileQueryKey = () => {
    return ['api','userinfo','me'] as const;
    }

    
export const getGetCurrentUserProfileQueryOptions = <TData = Awaited<ReturnType<typeof getCurrentUserProfile>>, TError = AxiosError<string>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserProfile>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  getGetCurrentUserProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUserProfile>>> = ({ signal }) => getCurrentUserProfile({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserProfile>>, TError, TData> 
}

export type GetCurrentUserProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentUserProfile>>>
export type GetCurrentUserProfileQueryError = AxiosError<string>


/**
 * @summary Get current user profile
 */

export function useGetCurrentUserProfile<TData = Awaited<ReturnType<typeof getCurrentUserProfile>>, TError = AxiosError<string>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserProfile>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCurrentUserProfileQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



