/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useQuery
} from '@tanstack/vue-query';
import type {
  DataTag,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import {
  computed,
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  Message
} from '.././model';





export const getUserMessages = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Message[]>> => {
    
    
    return axios.default.get(
      `/api/messages/user`,options
    );
  }


export const getGetUserMessagesQueryKey = () => {
    return ['api','messages','user'] as const;
    }

    
export const getGetUserMessagesQueryOptions = <TData = Awaited<ReturnType<typeof getUserMessages>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMessages>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  getGetUserMessagesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMessages>>> = ({ signal }) => getUserMessages({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserMessages>>, TError, TData> 
}

export type GetUserMessagesQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMessages>>>
export type GetUserMessagesQueryError = AxiosError<unknown>



export function useGetUserMessages<TData = Awaited<ReturnType<typeof getUserMessages>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMessages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserMessagesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



export const getConversation = (
    itemId: MaybeRef<number>,
    userId: MaybeRef<number>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Message[]>> => {
    itemId = unref(itemId);
userId = unref(userId);
    
    return axios.default.get(
      `/api/messages/conversation/${itemId}/${userId}`,options
    );
  }


export const getGetConversationQueryKey = (itemId: MaybeRef<number>,
    userId: MaybeRef<number>,) => {
    return ['api','messages','conversation',itemId,userId] as const;
    }

    
export const getGetConversationQueryOptions = <TData = Awaited<ReturnType<typeof getConversation>>, TError = AxiosError<unknown>>(itemId: MaybeRef<number>,
    userId: MaybeRef<number>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConversation>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  getGetConversationQueryKey(itemId,userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConversation>>> = ({ signal }) => getConversation(itemId,userId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: computed(() => !!(unref(itemId) && unref(userId))), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getConversation>>, TError, TData> 
}

export type GetConversationQueryResult = NonNullable<Awaited<ReturnType<typeof getConversation>>>
export type GetConversationQueryError = AxiosError<unknown>



export function useGetConversation<TData = Awaited<ReturnType<typeof getConversation>>, TError = AxiosError<unknown>>(
 itemId: MaybeRef<number>,
    userId: MaybeRef<number>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConversation>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetConversationQueryOptions(itemId,userId,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



