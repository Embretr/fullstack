/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useQuery
} from '@tanstack/vue-query';
import type {
  DataTag,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import {
  computed,
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  MessageResponseDTO
} from '.././model';





/**
 * @summary Get all conversations for the authenticated user
 */
export const getUserConversations = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MessageResponseDTO[]>> => {
    
    
    return axios.default.get(
      `/api/messages/conversations`,options
    );
  }


export const getGetUserConversationsQueryKey = () => {
    return ['api','messages','conversations'] as const;
    }

    
export const getGetUserConversationsQueryOptions = <TData = Awaited<ReturnType<typeof getUserConversations>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserConversations>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  getGetUserConversationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserConversations>>> = ({ signal }) => getUserConversations({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserConversations>>, TError, TData> 
}

export type GetUserConversationsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserConversations>>>
export type GetUserConversationsQueryError = AxiosError<unknown>


/**
 * @summary Get all conversations for the authenticated user
 */

export function useGetUserConversations<TData = Awaited<ReturnType<typeof getUserConversations>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserConversations>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserConversationsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



/**
 * @summary Get conversation between two users for a specific item
 */
export const getConversation = (
    userId: MaybeRef<number>,
    itemId: MaybeRef<number>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MessageResponseDTO[]>> => {
    userId = unref(userId);
itemId = unref(itemId);
    
    return axios.default.get(
      `/api/messages/conversation/${userId}/${itemId}`,options
    );
  }


export const getGetConversationQueryKey = (userId: MaybeRef<number>,
    itemId: MaybeRef<number>,) => {
    return ['api','messages','conversation',userId,itemId] as const;
    }

    
export const getGetConversationQueryOptions = <TData = Awaited<ReturnType<typeof getConversation>>, TError = AxiosError<unknown>>(userId: MaybeRef<number>,
    itemId: MaybeRef<number>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConversation>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  getGetConversationQueryKey(userId,itemId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConversation>>> = ({ signal }) => getConversation(userId,itemId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: computed(() => !!(unref(userId) && unref(itemId))), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getConversation>>, TError, TData> 
}

export type GetConversationQueryResult = NonNullable<Awaited<ReturnType<typeof getConversation>>>
export type GetConversationQueryError = AxiosError<unknown>


/**
 * @summary Get conversation between two users for a specific item
 */

export function useGetConversation<TData = Awaited<ReturnType<typeof getConversation>>, TError = AxiosError<unknown>>(
 userId: MaybeRef<number>,
    itemId: MaybeRef<number>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConversation>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetConversationQueryOptions(userId,itemId,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



